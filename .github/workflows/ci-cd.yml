name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [llm-service, agent-orchestrator, dashboard-service, agent-monitoring-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js (for TypeScript/JS services)
      if: matrix.service != 'llm-service' && matrix.service != 'agent-monitoring-service'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'services/${{ matrix.service }}/package-lock.json'

    - name: Setup Python (for Python services)
      if: matrix.service == 'llm-service' || matrix.service == 'agent-monitoring-service'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies (Node.js)
      if: matrix.service != 'llm-service' && matrix.service != 'agent-monitoring-service'
      run: |
        cd services/${{ matrix.service }}
        npm ci

    - name: Install dependencies (Python)
      if: matrix.service == 'llm-service' || matrix.service == 'agent-monitoring-service'
      run: |
        cd services/${{ matrix.service }}
        pip install -r requirements.txt

    - name: Run linting (Node.js)
      if: matrix.service != 'llm-service' && matrix.service != 'agent-monitoring-service'
      run: |
        cd services/${{ matrix.service }}
        npm run lint

    - name: Run tests (Node.js)
      if: matrix.service != 'llm-service' && matrix.service != 'agent-monitoring-service'
      run: |
        cd services/${{ matrix.service }}
        npm test

    - name: Build (Node.js)
      if: matrix.service != 'llm-service' && matrix.service != 'agent-monitoring-service'
      run: |
        cd services/${{ matrix.service }}
        npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [llm-service, agent-orchestrator, dashboard-service, agent-monitoring-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./services/${{ matrix.service }}
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deployment step - configure based on your infrastructure"
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/ or docker-compose up -d