import { EmailService } from '../services/email.service';
import dotenv from 'dotenv';

dotenv.config();

interface DailyReportData {
  date: string;
  applicationsSubmitted: number;
  outreachSent: number;
  responsesReceived: number;
  newJobsFound: number;
  platformStats: {
    linkedin: number;
    wellfound: number;
    glassdoor: number;
  };
}

class DailyReportGenerator {
  private emailService: EmailService;
  private recipientEmail: string;

  constructor() {
    this.emailService = new EmailService();
    this.recipientEmail = process.env.SMTP_TO || '';
  }

  private async getDailyData(): Promise<DailyReportData> {
    // This is a mock implementation - in production, this would fetch from database
    const today = new Date().toISOString().split('T')[0];
    
    // Mock data - replace with actual database queries
    return {
      date: today,
      applicationsSubmitted: Math.floor(Math.random() * 10) + 1,
      outreachSent: Math.floor(Math.random() * 15) + 5,
      responsesReceived: Math.floor(Math.random() * 3),
      newJobsFound: Math.floor(Math.random() * 25) + 10,
      platformStats: {
        linkedin: Math.floor(Math.random() * 8) + 2,
        wellfound: Math.floor(Math.random() * 6) + 1,
        glassdoor: Math.floor(Math.random() * 4) + 1
      }
    };
  }

  private generateEmailHTML(data: DailyReportData): string {
    return `
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background-color: #2c3e50; color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; }
        .stat-card { 
            display: inline-block; 
            margin: 10px; 
            padding: 15px; 
            background-color: #f8f9fa; 
            border-radius: 8px; 
            border-left: 4px solid #3498db;
            min-width: 200px;
        }
        .stat-number { font-size: 24px; font-weight: bold; color: #2c3e50; }
        .stat-label { color: #7f8c8d; text-transform: uppercase; font-size: 12px; }
        .platform-stats { margin-top: 20px; }
        .platform-item { 
            padding: 8px 0; 
            border-bottom: 1px solid #eee; 
            display: flex; 
            justify-content: space-between; 
        }
        .footer { 
            margin-top: 30px; 
            padding-top: 20px; 
            border-top: 1px solid #eee; 
            color: #7f8c8d; 
            font-size: 12px; 
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>ðŸŽ¯ Daily Job Application Report</h1>
        <p>Report for ${data.date}</p>
    </div>
    
    <div class="content">
        <h2>ðŸ“Š Today's Summary</h2>
        
        <div class="stat-card">
            <div class="stat-number">${data.applicationsSubmitted}</div>
            <div class="stat-label">Applications Submitted</div>
        </div>
        
        <div class="stat-card">
            <div class="stat-number">${data.outreachSent}</div>
            <div class="stat-label">Outreach Messages Sent</div>
        </div>
        
        <div class="stat-card">
            <div class="stat-number">${data.responsesReceived}</div>
            <div class="stat-label">Responses Received</div>
        </div>
        
        <div class="stat-card">
            <div class="stat-number">${data.newJobsFound}</div>
            <div class="stat-label">New Jobs Found</div>
        </div>
        
        <div class="platform-stats">
            <h3>ðŸ“± Platform Breakdown</h3>
            <div class="platform-item">
                <span>LinkedIn</span>
                <span><strong>${data.platformStats.linkedin}</strong> applications</span>
            </div>
            <div class="platform-item">
                <span>Wellfound (AngelList)</span>
                <span><strong>${data.platformStats.wellfound}</strong> applications</span>
            </div>
            <div class="platform-item">
                <span>Glassdoor</span>
                <span><strong>${data.platformStats.glassdoor}</strong> applications</span>
            </div>
        </div>
        
        <div class="footer">
            <p>This is an automated report generated by AJOB4AGENT.</p>
            <p>Generated at: ${new Date().toISOString()}</p>
        </div>
    </div>
</body>
</html>`;
  }

  async generateAndSend(): Promise<void> {
    try {
      // Verify email configuration
      const isConnected = await this.emailService.verifyConnection();
      if (!isConnected) {
        throw new Error('Failed to connect to SMTP server');
      }

      // Get daily data
      const reportData = await this.getDailyData();
      
      // Generate email content
      const emailHTML = this.generateEmailHTML(reportData);
      
      // Send email
      await this.emailService.sendEmail({
        to: this.recipientEmail,
        subject: `ðŸ“Š Daily Job Report - ${reportData.date}`,
        html: emailHTML
      });

      console.log('Daily report sent successfully!');
      
    } catch (error) {
      console.error('Failed to generate and send daily report:', error);
      process.exit(1);
    }
  }
}

// Run the report generator when this file is executed directly
if (require.main === module) {
  const generator = new DailyReportGenerator();
  generator.generateAndSend().catch((error) => {
    console.error(error);
    process.exit(1);
  });
}

export default DailyReportGenerator;